@rem   *** Build only with VS ***
@rem   
@rem   First, I’m going to build our solution using tools installed with Visual Studio
@rem   in a VS Developer Command Prompt.
-----
msbuild /t:rebuild MultiLangSolution.sln
show_demo_exes
report_demo_tools
dir msbuild*
-----
@rem   All projects built successfully and can be run in this shell.
-----
run_demo_exes
-----

@rem   *** Hybrid build – managed projects build w/VS-installed tools, native projects w/vcpkg-acquired tools ***
@rem   
@rem   Now, I’m going to build our solution using a mix of tools installed
@rem   with Visual Studio and tools acquired by vcpkg artifacts.

@rem   Here, we are going to use an ordinary cmd.exe prompt and add the MSBuild .exe 
@rem   installed with VS to the path.
@rem   
@rem   The command line is the same as before, except I am adding a property – UseVcpkg – 
@rem   to enable vcpkg integration. This is a custom property for this demo that sets the
@rem   three properties needed by MSBuild.
@rem   
@rem   In this case, the managed projects all build with the Roslyn tools installed with
@rem   VS and the native projects all use tools acquired by vcpkg. And we can build the 
@rem   entire solution just as on the other machine.
-----
msbuild /t:rebuild MultiLangSolution.sln /p:UseVcpkg=true
show_demo_exes
run_demo_exes
show_demo_tools
-----
@rem   All the projects build and run. The log shows that the managed projects and the 
@rem   native Hello-VS project that explicitly disables vcpkg integration build with 
@rem   VS-installed tools. The other native projects build with different combinations
@rem   of VC toolsets and Windows SDKs toolsets as on the machine with VS installed.
-----
where /r . vcpkg-configuration.json
-----
@rem   There are 4 vcpkg configuration files for the native projects. The top-level one
@rem   sets the default toolset and WinSDK to use for the projects in the subdirectories. 
@rem   The lower-level ones override that toolset and/or WinSDK. Additionally, one project
@rem   explicitly disables use of vcpkg; that one will fail on this machine.

@rem   *** Build both managed and native projects with vcpkg-acquired tools (no VS installation) ***
@rem   
@rem   Now, I’m going to build our solution using a mix of tools installed with 
@rem   Visual Studio and tools acquired by vcpkg artifacts.
@rem   
@rem   Again, we are using an ordinary cmd.exe prompt, but in this case, I am going to use 
@rem   vcpkg artifacts to acquire MSBuild and the Roslyn tools required. At this point, we 
@rem   have vcpkg and the dotnet SDKs installed, but do not yet have a version of MSBuild 
@rem   that will build C++ projects.
@rem   
@rem   As you can see, this shell has vcpkg and .NET on the path, but not MSBuild or any 
@rem   compiler. I have added entries into the vcpkg artifact registry to download and 
@rem   setup a subset of the MSBuild and Roslyn tools installed by VS 17.4.0. This can be
@rem   activated using the msbuild-bootstrap tag in this vcpkg config:
-----
pushd VcpkgSampleFiles
notepad vcpkg-configuration.json
vcpkg activate --tag:msbuild-bootstrap 
where_demo_tools
popd
-----
@rem   We now have MSBuild and Roslyn compilers in our environment, but no C++ compiler.
@rem   We can proceed to build the entire solution with vcpkg enabled just as we did before.
-----
msbuild /t:rebuild MultiLangSolution.sln /p:UseVcpkg=true
show_demo_exes
report_demo_tools
type msbuild.err
-----
@rem   Hello-VS fails to build as expected, but the logfile shows all the other projects
@rem   build with the same combinations of VC and WinSDK toolsets as on the machine with 
@rem   VS installed. I do need to activate the config for one native project that builds 
@rem   with the ASAN security option to be able to run.
-----
pushd Native\HelloCpp-Vcpkg2\HelloCpp-Vcpkg2-Nested
vcpkg activate --target:x64
where clang*.dll
popd
run_demo_exes hello mfc
-----
