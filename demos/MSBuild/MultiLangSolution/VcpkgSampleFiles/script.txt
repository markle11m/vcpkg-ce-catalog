@rem   ***
@rem   *** Preload x64-targeting artifacts
@rem   ***
@rem 
-----
rem Empty primary vcpkg cache
pushd %VCPKG_ROOT%\downloads
for %e in (msbuild mspdbsrv vbcscompiler) do @taskkill /F /IM %e.exe
rd /s /q artifacts 
for %p in (asan atl crt mfc microsoft sdks tools) do @del %p*.zip
dir *.zip
popd
-----
rem Activate all configs to preload cache
pushd Native
for /f "" %i in ('where /r . vcpkg-configuration.json') do @echo %i & pushd %~dpi & vcpkg activate --target:x64 --x64 & popd
for /f "" %i in ('where /r . vcpkg-configuration.json') do @echo %i & pushd %~dpi & vcpkg activate --target:x64 --x64 & popd
-----

@rem   ***
@rem   *** First machine overview
@rem   ***
@rem
-----
appwiz.cpl
where /r Native vcpkg-configuration.json
for %f in (Directory.Build EnableVcpkgArtifacts) do @pause & notepad Native\%f.props 
-----
@rem   This machine has VS 17.4.0 installed along with vcpkg.
@rem   The only additions made to support vcpkg artifacts are these configuration files,
@rem   and some additions to Directory.Build.props to enable vcpkg artifacts using a 
@rem   single property - UseVcpkg.

@rem   ***
@rem   *** Build only with VS
@rem   ***
@rem
@rem   First, I’m going to build our solution using tools installed with Visual Studio
@rem   in a VS Developer Command Prompt.
-----
pushd ..\.. & git checkout -f & git clean -df & git status & popd & pause
msbuild /t:rebuild MultiLangSolution.sln
dir msbuild*
report_demo_tools
show_demo_exes
-----
@rem   All projects built successfully and can be run in this shell.
-----
run_demo_exes Hello MFC
-----

@rem   ***
@rem   *** Hybrid build – managed projects build w/VS-installed tools, native projects w/vcpkg-acquired tools ***
@rem   ***
@rem   
@rem   Now, I’m going to build our solution using a mix of tools installed
@rem   with Visual Studio and tools acquired by vcpkg artifacts.
@rem   Here, we are going to use an ordinary cmd.exe prompt and add the MSBuild .exe 
@rem   installed with VS to the path.
@rem   
@rem   The command line is the same as before, except I am adding a property – UseVcpkg – 
@rem   to enable vcpkg integration. This is a custom property for this demo that sets the
@rem   three properties needed by MSBuild.
@rem   
@rem   In this case, the managed projects all build with the Roslyn tools installed with
@rem   VS and the native projects all use tools acquired by vcpkg. And we can build the 
@rem   entire solution just as on the other machine.
-----
pushd ..\.. & git checkout -f & git clean -df & git status & popd & pause
rmdir_vcpkg
msbuild /t:rebuild MultiLangSolution.sln /p:UseVcpkg=true
report_demo_tools
show_demo_exes
dir msbuild*
-----
@rem   All the builds succeeded. The log shows that the managed projects and the 
@rem   native Hello-VS project that explicitly disables vcpkg integration build with 
@rem   VS-installed tools. The other native projects build with different combinations
@rem   of VC toolsets and Windows SDKs toolsets as on the machine with VS installed.
@rem
@rem   All the builds also run successfully. I do need to activate the config for the
@rem   native project that uses ASAN to add clang's ASAN runtime files to the path.
-----
pushd Native\HelloCpp-Vcpkg2\HelloCpp-Vcpkg2-Nested
vcpkg activate --target:x64
where clang*.dll
popd
run_demo_exes Hello MFC
-----
@rem   This solution uses vcpkg configuration files to build native projects. The 
@rem   top-level one sets a default toolset and WinSDK to use for all projects below
@rem   it. The lower-level ones override that toolset and/or WinSDK. Additionally, 
@rem   one project explicitly disables use of vcpkg; that one will fail on this machine.
-----
where /r Native vcpkg-configuration.json
notepad Native\vcpkg-configuration.json & pause
for %i in (HelloCpp-Vcpkg2 HelloCpp-Vcpkg2\HelloCpp-Vcpkg2-Nested MFCApp) do @notepad %i\vcpkg-configuration.json & pause
-----

@rem   Vcpkg artifacts can also be used to acquire tools dynamically.
@rem   First change the console logging back to to normal.
-----
notepad Directory.Build.rsp
msbuild /t:rebuild MultiLangSolution.sln /p:UseVcpkg=true /p:Platform=x86
show_demo_exes
report_demo_tools
run_demo_exes Hello MFC
-----
@rem   We can also change the compiler and Windows SDK version.
-----
copy VcpkgSampleFiles\vcpkg-configuration.json-uncached Native\vcpkg-configuration.json
msbuild /t:rebuild MultiLangSolution.sln /p:UseVcpkg=true /p:Platform=x86
show_demo_exes
report_demo_tools
run_demo_exes Hello
-----

@rem   *** Build both managed and native projects with vcpkg-acquired tools (no VS installation) ***
@rem   
@rem   Now, I’m going to build our solution using a mix of tools installed with 
@rem   Visual Studio and tools acquired by vcpkg artifacts.
@rem 
@rem   Again, we are using an ordinary cmd.exe prompt, but in this case, I am going to use 
@rem   vcpkg artifacts to acquire MSBuild and the Roslyn tools required. At this point, we 
@rem   have vcpkg and the dotnet SDKs installed, but do not yet have a version of MSBuild 
@rem   that will build C++ projects.
@rem   
@rem   As you can see, this shell has vcpkg and .NET on the path, but not MSBuild or any 
@rem   compiler. I have added entries into the vcpkg artifact registry to download and 
@rem   setup a subset of the MSBuild and Roslyn tools installed by VS 17.4.0. This can be
@rem   activated using the msbuild-bootstrap tag in this vcpkg config:
-----
pushd VcpkgSampleFiles
notepad vcpkg-configuration.json
vcpkg activate --tag:msbuild-bootstrap 
where_demo_tools
popd
-----
@rem   We now have MSBuild and Roslyn compilers in our environment, but no C++ compiler.
@rem   We can proceed to build the entire solution with vcpkg enabled just as we did before.
-----
pushd ..\.. & git checkout -f & git clean -df & git status & popd & pause
rmdir_vcpkg
msbuild /t:rebuild MultiLangSolution.sln /p:UseVcpkg=true
report_demo_tools
show_demo_exes
type msbuild.err
-----
@rem   Hello-VS fails to build as expected, since it explicitly disables vcpkg integration,
@rem   and VS is not installed on the machine to fall back to. The logfile shows all the 
@rem   other projects build with the same combinations of VC and WinSDK toolsets as they 
@rem   did on the machine with VS installed.
@rem
@rem   All the successful builds also run. I do need to activate the config for the
@rem   native project that uses ASAN to add clang's ASAN runtime files to the path.
-----
pushd Native\HelloCpp-Vcpkg2\HelloCpp-Vcpkg2-Nested
vcpkg activate --target:x64
where clang*.dll
popd
run_demo_exes Hello MFC
-----

